// dungeon game
call init

// 160-255 user data
// (96 bytes)

// player x/y
#def PX 192
#def PY 193
#def PA 194

#def PSPD 8


// game loop
game_loop:

// read keyboard port
in r0, 9

ld r2, PX
ld r3, PY

tst r0, 0001b
jne l1
//left
call step_left
l1:
tst r0, 0010b
jne l2
//right
call step_right
l2:
tst r0, 0100b
jne l3
//up
call step_up
l3:
tst r0, 1000b
jne l4
//dn
call step_down
l4:



// update sprite pos in GPU/mem
st PX, r2
st PY, r3
out 19, r2
out 20, r3

// wait loop (keep anim)
call step_anim
hlt
call step_anim
hlt

jmp game_loop

//r2 - x, r3 - y
//----------------
step_left:
push r0
push r2

//step
sub r2, PSPD
// pixel to char addr
mov r4, r2
sr r4, 4
mov r1, r3
and r1, 00001111b 
mov r0, r3
and r0, 11110000b
add r0, r4

ld r4, r0
cmp r4, 0
jne step_left_neg
cmp r1, 0
je step_left_pos

add r0, 16
ld r4, r0
cmp r4, 0
jne step_left_neg
step_left_pos:
// can step
pop r4
pop r0
ret
//cant step
step_left_neg:
pop r2
pop r0
ret


//r2 - x, r3 - y
//----------------
step_right:
push r0
push r2

//step
add r2, PSPD
// pixel to char addr
mov r4, r2
add r4, 15
sr r4, 4
mov r1, r3
and r1, 00001111b 
mov r0, r3
and r0, 11110000b
add r0, r4

ld r4, r0
cmp r4, 0
jne step_right_neg
cmp r1, 0
je step_right_pos

add r0, 16
ld r4, r0
cmp r4, 0
jne step_right_neg
step_right_pos:
// can step
pop r4
pop r0
ret
//cant step
step_right_neg:
pop r2
pop r0
ret


//r2 - x, r3 - y
//----------------
step_down:
push r0
push r3

//step
add r3, PSPD
// pixel to char addr
mov r4, r2
mov r1, r4
and r1, 00001111b 
sr r4, 4
mov r0, r3
add r0, 15
and r0, 11110000b
add r0, r4

ld r4, r0
cmp r4, 0
jne step_down_neg
cmp r1, 0
je step_down_pos

add r0, 1
ld r4, r0
cmp r4, 0
jne step_down_neg
step_down_pos:
// can step
pop r4
pop r0
ret
//cant step
step_down_neg:
pop r3
pop r0
ret


//r2 - x, r3 - y
//----------------
step_up:
push r0
push r3

//step
sub r3, PSPD
// pixel to char addr
mov r4, r2
mov r1, r4
and r1, 00001111b 
sr r4, 4
mov r0, r3
and r0, 11110000b
add r0, r4

ld r4, r0
cmp r4, 0
jne step_up_neg
cmp r1, 0
je step_up_pos

add r0, 1
ld r4, r0
cmp r4, 0
jne step_up_neg
step_up_pos:
// can step
pop r4
pop r0
ret
//cant step
step_up_neg:
pop r3
pop r0
ret

//----------------

// step animation func
step_anim:


ld r0, PA
add r0, 1
cmp r0, 30
jle l5
mov r0, 28
l5:
st PA, r0

out 21, r0

ret


init:

// music
out 255, 0

// background and border
out 11, 01110010b


// dark-read and yellow
out 12, 11000000b

// bright-red
out 13, 10001000b
out 14, 10001000b
out 15, 10001000b
out 16, 10001000b
out 17, 10001000b

// last two lines are invisible
out 18, 119

// border tiles
st 0, 108
st 1, 108
st 2, 108
st 3, 108
st 4, 108
st 5, 108
st 6, 108
st 7, 108
st 8, 108
st 9, 108
st 10, 108
st 11, 108
st 12, 108
st 13, 108
st 14, 108
st 15, 108
st 16, 108
st 31, 108
st 32, 108
st 47, 108
st 48, 108
st 63, 108
st 64, 108
st 79, 108
st 80, 108
st 95, 108
st 96, 108
st 111, 108
st 112, 108
st 127, 108
st 128, 108
st 143, 108
st 144, 108
st 145, 108
st 146, 108
st 147, 108
st 148, 108
st 149, 108
st 150, 108
st 151, 108
st 152, 108
st 153, 108
st 154, 108
st 155, 108
st 156, 108
st 157, 108
st 158, 108
st 159, 108
st 159, 108


// game-area
st 18, 236
st 20, 236
st 22, 236
st 24, 236

st 34, 236
st 38, 236
st 40, 236
st 41, 236
st 42, 236
st 43, 236
st 45, 236
st 46, 236

st 50, 236
st 52, 236
st 54, 236

st 66, 236
st 67, 236
st 68, 236
st 70, 236
st 72, 236
st 75, 236
st 77, 236

st 86, 236
st 87, 236
st 88, 236
st 91, 236
st 93, 236

st 99, 236
st 100, 236
st 102, 236
st 107, 236
st 109, 236

st 116, 236
st 121, 236
st 122, 236
st 123, 236
st 125, 236
st 126, 236

st 129, 236
st 132, 236
st 134, 236
st 135, 236
st 137, 236


// coins
//st 23, 231
//st 25, 231
//st 30, 231
//st 51, 231
//st 65, 231
//st 71, 231
//st 110, 231
//st 131, 231
//st 136, 231
//st 138, 231
//st 142, 231



// avatar
out 19, 16
out 20, 16
out 21, 28

// enemy skeleton
out 22, 80
out 23, 16
out 24, 1

// enemy dark skeleton
out 25, 112
out 26, 48
out 27, 5

// enemy pumpkin
out 28, 192
out 29, 112
out 30, 9

// test-sfx
out 253, 32


st PX, 16
st PY, 16
st PA, 28


ret
